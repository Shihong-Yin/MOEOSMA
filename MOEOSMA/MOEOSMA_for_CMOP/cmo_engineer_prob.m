function [f,g,h] = cmo_engineer_prob(x,prob_k)
% Real-world Multi-objective Engineering Optimization Problems
% 1.  Speed reducer design problem
% 2.  Spring design problem
% 3.  Hydrostatic thrust bearing design problem
% 4.  Vibrating platform design problem
% 5.  Car side impact design problem
% 6.  Water resource management problem
% 7.  Bulk carriers design problem
% 8.  Multi-product batch plant problem
% 9.  60-bar 2D truss optimization
% 10. 72-bar 2D truss optimization
% 11. 200-bar 2D truss optimization
% 12. 942-bar 2D truss optimization
% --------------------------------------------------
% x: N * D, where N is the number of population and D is the dimension of problem
% f: Fitness value
% g: Inequality constraint
% h: Equality constraint
% func_num: Index of problem
ps = size(x,1);
switch prob_k
    case 1
        %% Speed reducer design problem
        x1 = x(:,1);
        x2 = x(:,2);
        x3 = round(x(:,3));
        x4 = x(:,4);
        x5 = x(:,5);
        x6 = x(:,6);
        x7 = x(:,7);
        %% objective function
        f = zeros(ps,2);
        f(:,1) = 0.7854.*x1.*x2.^2.*(3.3333.*x3.^2+14.9334.*x3-43.0934)...
            - 1.508.*x1.*(x6.^2+x7.^2)+7.4777.*(x6.^3+x7.^3)+0.7854.*(x4.*x6.^2+x5.*x7.^2);
        f(:,2) = sqrt((745.*x4./(x2.*x3)).^2+1.69e7)./(0.1.*x6.^3);
        %% constraints
        g = zeros(ps,11);
        h = zeros(ps,0);
        g(:,1) = 1./(x1.*x2.^2.*x3)-1/27;
        g(:,2) = 1./(x1.*x2.^2.*x3.^2)-1/397.5;
        g(:,3) = x4.^3./(x2.*x3.*x6.^4)-1/1.93;
        g(:,4) = x5.^3./(x2.*x3.*x7.^4)-1/1.93;
        g(:,5) = x2.*x3-40;
        g(:,6) = x1./x2-12;
        g(:,7) = -x1./x2+5;
        g(:,8) = 1.9-x4+1.5.*x6;
        g(:,9) = 1.9-x5+1.1.*x7;
        g(:,10) = f(:,2)-1100;
        g(:,11) = sqrt((745.*x5./(x2.*x3)).^2+1.575e8)./(0.1*x7.^3)-850;
    case 2
        %% Spring design problem
        x1 = round(x(:,1));
        x2 = x(:,2);
        d  = [0.009, 0.0095, 0.0104, 0.0118, 0.0128, 0.0132, 0.014,....
            0.015, 0.0162, 0.0173, 0.018, 0.020, 0.023, 0.025,...
            0.028, 0.032, 0.035, 0.041, 0.047, 0.054, 0.063,....
            0.072, 0.080, 0.092, 0.0105, 0.120, 0.135, 0.148,....
            0.162, 0.177, 0.192, 0.207, 0.225, 0.244, 0.263,....
            0.283, 0.307, 0.331, 0.362, 0.394, 0.4375, 0.500];
        x3 = d(round(x(:,3)));
        x3 = x3';
        %% constants
        cf = (4.*x2./x3-1)./(4.*x2./x3-4)+0.615.*x3./x2;
        K  = (11.5.*10.^6.*x3.^4)./(8.*x1.*x2.^3);
        lf = 1000./K + 1.05.*(x1+2).*x3;
        sigp = 300./K;
        %% objective function
        f = zeros(ps,2);
        f(:,1) = (pi.^2.*x2.*x3.^2.*(x1+2))./4;
        f(:,2) = (8000.*cf.*x2)./(pi.*x3.^3);
        %% constraints
        g = zeros(ps,8);
        h = zeros(ps,0);
        g(:,1) = f(:,2)-189000;
        g(:,2) = lf-14;
        g(:,3) = 0.2-x3;
        g(:,4) = x2+x3-3;
        g(:,5) = 3-x2./x3;
        g(:,6) = sigp - 6;
        g(:,7) = f(:,1)-30;
        g(:,8) = 1.25-700./K;
    case 3
        %% Hydrostatic thrust bearing design problem
        R = x(:,1); Ro = x(:,2);  mu = x(:,3); Q = x(:,4);
        gamma = 0.0307; C = 0.5; n = -3.55; C1 = 10.04;
        Ws = 101000; Pmax = 1000; delTmax = 50; hmin = 0.001;
        gg = 386.4; N = 750;
        P    = (log10(log10(8.122*1e6.*mu+0.8))-C1)./n;
        delT = 2.*(10.^P-560);
        Ef   = 9336.*Q.*gamma.*C.*delT;
        hh   = (2.*pi.*N./60).^2.*2.*pi.*mu./Ef.*(R.^4./4-Ro.^4./4)-1e-5;
        P0   = (6.*mu.*Q./(pi.*hh.^3)).*log(R./Ro);
        W    = pi.*P0./2.*(R.^2-Ro.^2)./(log(R./Ro)-1e-5);
        %% objective function
        f = zeros(ps,2);
        f(:,1) = (Q.*P0./0.7+Ef)./12;
        f(:,2) = gamma./(gg.*P0).*(Q./(2.*pi.*R.*hh));
        %% constraints
        g      = zeros(ps,7);
        h      = zeros(ps,0);
        g(:,1) = Ws-W;
        g(:,2) = P0-Pmax;
        g(:,3) = delT-delTmax;
        g(:,4) = hmin-hh;
        g(:,5) = Ro-R;
        g(:,6) = f(:,2)-0.001;
        g(:,7) = W./(pi.*(R.^2-Ro.^2)+1e-5)-5000;
    case 4
        %% Vibrating platform design problem
        d1 = x(:,1);
        d2 = x(:,2);
        d3 = x(:,3);
        b = x(:,4);
        L = x(:,5);
        rho1 = 100; rho2 = 2770; rho3 = 7780;
        E1 = 1.6; E2 = 70; E3 = 200;
        c1 = 500; c2 = 1500; c3 = 800;
        mu = 2*b.*(rho1.*d1+rho2.*(d2-d1)+rho3.*(d3-d2));
        EI = (2*b./3).*(E1.*d1.^3+E2.*(d2.^3-d1.^3)+E3.*(d3.^3-d2.^3));
        %% objective function
        f = zeros(ps,2);
        f(:,1) = -pi./(2*L.^2).*(abs(EI./mu)).^0.5;
        f(:,2) = 2*b.*L.*(c1.*d1+c2.*(d2-d1)+c3.*(d3-d2));
        %% constraints
        g = zeros(ps,5);
        h = zeros(ps,0);
        g(:,1) = mu.*L -2800;
        g(:,2) = d1-d2;
        g(:,3) = d2-d1-0.15;
        g(:,4) = d2-d3;
        g(:,5) = d3-d2-0.01;
    case 5
        %% Car side impact design problem
        x1 = x(:,1);
        x2 = x(:,2);
        x3 = x(:,3);
        x4 = x(:,4);
        x5 = x(:,5);
        x6 = x(:,6);
        x7 = x(:,7);
        VMBP = 10.58-0.674.*x1.*x2-0.67275.*x2;
        VFD  = 16.45-0.489.*x3.*x7-0.843.*x5.*x6;
        %% objective function
        f = zeros(ps,3);
        f(:,1) = 1.98+4.9.*x1+6.67.*x2+6.98.*x3+4.01.*x4+1.78.*x5+1e-5.*x6+2.73.*x7;
        f(:,2) = 4.72-0.5.*x4-0.19.*x2.*x3;
        f(:,3) = 0.5.*(VMBP+VFD);
        %% constraints
        g = zeros(ps,10);
        h = zeros(ps,0);
        g(:,1) = -1+1.16-0.3717.*x2.*x4-0.0092928.*x3;
        g(:,2) = -0.32+0.261-0.0159.*x1.*x2-0.06486.*x1-0.019.*x2.*x7+0.0144.*x3.*x5+0.0154464.*x6;
        g(:,3) = -0.32+0.74-0.61.*x2-0.031296.*x3-0.031872.*x7+0.227.*x2.^2;
        g(:,4) = -0.32+0.214+0.00817.*x5-0.045195.*x1-0.0135168.*x1...
            +0.03099.*x2.*x6-0.018.*x2.*x7+0.007176.*x3+0.023232.*x3-0.00364.*x5.*x6-0.018.*x2.^2;
        g(:,5) = -32+33.86+2.95.*x3-5.057.*x1.*x2-3.795.*x2-3.4431.*x7+1.45728;
        g(:,6) = -32+28.98+3.818.*x3-4.2.*x1.*x2+1.27296.*x6-2.68065.*x7;
        g(:,7) = -32+46.36-9.9.*x2-4.4505.*x1;
        g(:,8) = f(:,2)-4;
        g(:,9) = VMBP-9.9;
        g(:,10) = VFD-15.7;
    case 6
        %% Water resource management problem
        x1 = x(:,1);
        x2 = x(:,2);
        x3 = x(:,3);
        %% objectives
        f = zeros(ps,5);
        f(:,1) = 106780.37 .* (x2 + x3) + 61704.67;
        f(:,2) = 3000 .* x1;
        f(:,3) = 30570 .* 2289 .* x2 ./ ((0.06.*2289).^0.65);
        f(:,4) = 250 .* 2289 .* exp(-39.75.*x2+9.9.*x3+2.74);
        f(:,5) = 25 .* (1.39 ./(x1.*x2) + 4940.*x3 -80);
        %% Constraints
        g = zeros(ps,7);
        h = zeros(ps,0);
        g(:,1) = (0.00139./(x1.*x2)+4.94.*x3-0.08)-1;
        g(:,2) = (0.000306./(x1.*x2)+1.082.*x3-0.0986)-1;
        g(:,3) = (12.307./(x1.*x2)+49408.24.*x3+4051.02)-50000;
        g(:,4) = (2.098./(x1.*x2)+8046.33.*x3-696.71)-16000;
        g(:,5) = (2.138./(x1.*x2)+7883.39.*x3-705.04)-10000;
        g(:,6) = (0.417.*x1.*x2+1721.26.*x3-136.54)-2000;
        g(:,7) = (0.164./(x1.*x2)+631.13.*x3-54.48)-550;
    case 7
        %% Bulk carriers design problem
        L = x(:,1);
        B = x(:,2);
        D = x(:,3);
        T = x(:,4);
        V_k = x(:,5);
        C_B = x(:,6);
        
        a = 4977.06.*C_B.^2 - 8105.61.*C_B + 4456.51;
        b = -10847.2.*C_B.^2 + 12817.*C_B - 6960.32;
        F_n = 0.5144.*V_k./(9.8065 .* L).^0.5;
        P = ((1.025.*L.*B.*T.*C_B).^(2/3).*V_k.^3)./(a + b.*F_n);
        
        W_s = 0.034.*L.^1.7.*B.^0.7.*D.^0.4.*C_B.^0.5;
        W_o = L.^0.8.*B.^0.6.*D.^0.3.*C_B.^0.1;
        W_m = 0.17.*P.^0.9;
        W_ls = W_s+W_o+W_m;
        
        D_wt = 1.025.*L.*B.*T.*C_B-W_ls;
        D_c = 0.19.*24.*P./1000 + 0.2;
        S_d = 5000.*V_k./24;
        D_cwt = D_wt - D_c.*(S_d + 5)-2.*D_wt.^0.5;
        R_tpa = 350./(S_d + 2.*(D_cwt./8000 + 0.5));
        C_a = D_cwt.*R_tpa;
        
        C_c = 0.2.*1.3 .* (2000.*W_s.^0.85 + 3500.*W_o + 2400.*P.^0.8);
        C_r = 40000.*D_wt.^0.3;
        C_v = (1.05.*100.*D_c.*S_d + 6.3.*D_wt.^0.8).*R_tpa;
        
        %% objectives
        f = zeros(ps,3);
        f(:,1)= (C_c + C_r + C_v)./C_a;
        f(:,2) = W_ls;
        f(:,3) = - C_a;
        %% constraints
        g = zeros(ps,9);
        h = zeros(ps,0);
        g(:,1) = - L./B + 6;
        g(:,2) = L./D - 15;
        g(:,3) = L./T - 19;
        g(:,4) = T - 0.45.*D_wt.^0.31;
        g(:,5) = T - 0.7.*D - 0.7;
        g(:,6) = F_n - 0.32;
        g(:,7) = - 0.53.*T - ((0.085.*C_B - 0.002).*B.^2)./(T.*C_B)+(1 + 0.52.*D) + 0.07.*B;
        g(:,8) = - D_wt + 3000;
        g(:,9) = D_wt - 500000;
    case 8
        %% Multi-product batch plant problem
        %% constant
        S = [2,3,4;
            4,6,3];
        t = [8,20,8;
            16,4,4];
        H = 6000; alp = 250; beta = 0.6;
        Q1 = 40000; Q2 = 20000;
        %% decision Variable
        N1 = round(x(:,1)); N2 = round(x(:,2)); N3 = round(x(:,3));
        V1 = x(:,4); V2 = x(:,5); V3 = x(:,6);
        TL1 = x(:,7); TL2 = x(:,8);
        B1 = x(:,9); B2 = x(:,10);
        %% objective function
        f = zeros(ps,3);
        f(:,1) = alp.*(N1.*V1.^beta+N2.*V2.^beta+N3.*V3.^beta);
        f(:,2) = 65.*(Q1./B1+Q2./B2)+0.08.*Q1+0.1.*Q2;
        f(:,3) = Q1.*TL1./B1+Q2.*TL2./B2;
        %% constraints
        g = zeros(ps,10);
        h = zeros(ps,0);
        g(:,1) = Q1.*TL1./B1+Q2.*TL2./B2-H;
        g(:,2) = S(1,1).*B1+S(2,1).*B2-V1;
        g(:,3) = S(1,2).*B1+S(2,2).*B2-V2;
        g(:,4) = S(1,3).*B1+S(2,3).*B2-V3;
        g(:,5) = t(1,1)-N1.*TL1;
        g(:,6) = t(1,2)-N2.*TL1;
        g(:,7) = t(1,3)-N3.*TL1;
        g(:,8) = t(2,1)-N1.*TL2;
        g(:,9) = t(2,2)-N2.*TL2;
        g(:,10) = t(2,3)-N3.*TL2;
    case 9
        %% 60-bar 2D truss optimization
        x = x';
        x = round(x); % round x as cross-section size index
        % Material properties
        rho = 7850; % Density (kg/m^3)
        sigma_a = 400e6; % allowable stress (Pa)
        E = 200e9; % modulus of elasticity (Pa)
        % Geometry (position in m)
        node = [2.500000000000000                   0
            2.165063500000000   1.250000000000000
            1.250000000000000   2.165063500000000
            0   2.500000000000000
            -1.250000000000000   2.165063500000000
            -2.165063500000000   1.250000000000000
            -2.500000000000000                   0
            -2.165063500000000  -1.250000000000000
            -1.250000000000000  -2.165063500000000
            0  -2.500000000000000
            1.250000000000000  -2.165063500000000
            2.165063500000000  -1.250000000000000
            2.250000000000000                   0
            1.948557250000000   1.125000000000000
            1.125000000000000   1.948557250000000
            0   2.250000000000000
            -1.125000000000000   1.948557250000000
            -1.948557250000000   1.125000000000000
            -2.250000000000000                   0
            -1.948557250000000  -1.125000000000000
            -1.125000000000000  -1.948557250000000
            0  -2.250000000000000
            1.125000000000000  -1.948557250000000
            1.948557250000000  -1.125000000000000];
        ele = [1  2;
            2  3;
            3  4;
            4  5;
            5  6;
            6  7;
            7  8;
            8  9;
            9  10;
            10 11;
            11 12;
            12 1;
            13 14;
            14 15;
            15 16;
            16 17;
            17 18;
            18 19;
            19 20;
            20 21;
            21 22;
            22 23;
            23 24;
            24 13;
            1  14;
            2  15;
            3  16;
            4  17;
            5  18;
            6  19;
            7  20;
            8  21;
            9  22;
            10 23;
            11 24;
            12 13;
            13 2;
            14 3;
            15 4;
            16 5;
            17 6;
            18 7;
            19 8;
            20 9;
            21 10;
            22 11;
            23 12;
            24 1;
            13 1;
            14 2;
            15 3;
            16 4;
            17 5;
            18 6;
            19 7;
            20 8;
            21 9;
            22 10;
            23 11;
            24 12]; % Element connectivity
        % Cross-section areas (m^2)
        section = (1e-3)*(1:.5:21); % List of discrete cross-section area
        A = zeros(60,1);
        
        f = zeros(2,ps);
        g = zeros(60,ps);
        h = zeros(ps,0);
        
        for p = 1:ps
            xp = x(:,p);
            A(49:60,1) = section(xp(1));
            A([1 13],1) = section(xp(2)); % Assign Group Areas as per symmetry
            A([2 14],1) = section(xp(3));
            A([3 15],1) = section(xp(4));
            A([4 16],1) = section(xp(5));
            A([5 17],1) = section(xp(6));
            A([6 18],1) = section(xp(7));
            A([7 19],1) = section(xp(8));
            A([8 20],1) = section(xp(9));
            A([9 21],1) = section(xp(10));
            A([10 22],1) = section(xp(11));
            A([11 23],1) = section(xp(12));
            A([12 24],1) = section(xp(13));
            A([25 37],1) = section(xp(14));
            A([26 38],1) = section(xp(15));
            A([27 39],1) = section(xp(16));
            A([28 40],1) = section(xp(17));
            A([29 41],1) = section(xp(18));
            A([30 42],1) = section(xp(19));
            A([31 43],1) = section(xp(20));
            A([32 44],1) = section(xp(21));
            A([33 45],1) =section(xp(22));
            A([34 46],1) = section(xp(23));
            A([35 47],1) = section(xp(24));
            A([36 48],1) = section(xp(25));
            % Loadings
            % node  dof  load(N)   % dof = 1 for x-axis, 2 for y-axis, 3 for z-axis
            Load{1} = [1       1       -10e5;
                7       1       9e5];
            Load{2} = [15      1       -8e5;
                15      2       3e5;
                18      1       -8e5;
                18      2       3e5];
            Load{3} = [22      1       -20e5;
                22      2       10e5];
            % Prescribed displacement
            % node  dof  displacement(m)   % dof = 1 for x-axis, 2 for y-axis, 3 for z-axis
            BC = [10      1       0;
                10      2       0;
                16      1       0];
            % Solving with Finite Element Method (FEM)
            [f(:,p),g(:,p)] = fem_solver(node,ele,A,E,Load,BC,rho,sigma_a);
        end
        f = f';
        g = g';
    case 10
        %% 72-bar 3D truss optimization
        x = x';
        x = round(x); % round x as cross-section size index
        % Material properties
        rho = 7850; % Density (kg/m^3)
        sigma_a = 400e6; % allowable stress (Pa)
        E = 200e9; % modulus of elasticity (Pa)
        % Geometry (position in m)
        node = [0       0       0;
            3       0       0;
            3       3       0;
            0       3       0;
            0       0       1.5;
            3       0       1.5;
            3       3       1.5;
            0       3       1.5;
            0       0       3;
            3       0       3;
            3       3       3;
            0       3       3;
            0       0       4.5;
            3       0       4.5;
            3       3       4.5;
            0       3       4.5;
            0       0       6;
            3       0       6;
            3       3       6;
            0       3       6];
        ele = [1   5;
            2   6;
            3   7;
            4   8;
            1   6;
            2   5;
            2   7;
            3   6;
            3   8;
            4   7;
            4   5;
            1   8;
            5   6;
            6   7;
            7   8;
            8   5;
            5   7;
            6   8;
            5   9;
            6   10;
            7   11;
            8   12;
            5   10;
            6   9;
            6   11;
            7   10;
            7   12;
            8   11;
            8   9;
            5   12;
            9   10;
            10  11;
            11  12;
            12  9;
            9   11;
            10  12;
            9   13;
            10  14;
            11  15;
            12  16;
            9   14;
            10  13;
            10  15;
            11  14;
            11  16;
            12  15;
            12  13;
            9   16;
            13  14;
            14  15;
            15  16;
            16  13;
            13  15;
            14  16;
            13  17;
            14  18;
            15  19;
            16  20;
            13  18;
            14  17;
            14  19;
            15  18;
            15  20;
            16  19;
            16  17;
            13  20;
            17  18;
            18  19;
            19  20;
            20  17;
            17  19;
            18  20];
        % Cross-section areas (m^2)
        section = (1e-3)*(1:.5:21); % List of discrete cross-section area
        
        f = zeros(2,ps);
        g = zeros(72,ps);
        h = zeros(ps,0);
        
        for p = 1:ps
            xp = x(:,p);
            A(1:4) = section(xp(1));
            A(5:12) = section(xp(2));
            A(13:16) = section(xp(3));
            A(17:18) = section(xp(4));
            A(19:22) = section(xp(5));
            A(23:30) = section(xp(6));
            A(31:34) = section(xp(7));
            A(35:36) = section(xp(8));
            A(37:40) = section(xp(9));
            A(41:48) = section(xp(10));
            A(49:52) = section(xp(11));
            A(53:54) = section(xp(12));
            A(55:58) = section(xp(13));
            A(59:66) = section(xp(14));
            A(67:70) = section(xp(15));
            A(71:72) = section(xp(16));
            % Loadings
            % node  dof  load(N)  % dof = 1 for x-axis, 2 for y-axis, 3 for z-axis
            Load{1} = [ 17      1       2e6;
                17      2       2e6;
                17      3       -2e6];
            Load{2} = [ 17      3       -2e6;
                18      3       -2e6;
                19      3       -2e6;
                20      3       -2e6];
            % Prescribed displacement
            % node  dof  displacement(m)  % dof = 1 for x-axis, 2 for y-axis, 3 for z-axis
            BC = [1       1       0;
                1       2       0;
                1       3       0;
                2       1       0;
                2       2       0;
                2       3       0;
                3       1       0;
                3       2       0;
                3       3       0;
                4       1       0;
                4       2       0;
                4       3       0];
            % Solving with Finite Element Method (FEM)
            [f(:,p),g(:,p)] = fem_solver(node,ele,A,E,Load,BC,rho,sigma_a);
        end
        f = f';
        g = g';
    case 11
        %% 200-bar 2D truss optimization
        x = x';
        x = round(x); % round x as cross-section size index
        % Material properties
        rho = 7850; % Density (kg/m^3)
        sigma_a = 400e6; % allowable stress (Pa)
        E = 200e9; % modulus of elasticity (Pa)
        % Geometry (position in m)
        yh = fliplr([0 linspace(9,9+36,11)]);
        node = [];
        for i = 1:11
            if floor(i/2) ~= i/2
                node = [node;[linspace(0,24,5)' yh(i)*ones(5,1)]];
            else
                node = [node;[linspace(0,24,9)' yh(i)*ones(9,1)]];
            end
        end
        node = [node;[6 0];[18 0]];
        % element = the matrix of truss elements represented by node number combination
        %  node numbers   Element diameter
        ele = [];
        for i = 1:5
            n1=14*i-13;n2=14*i-12;n3=14*i-11;n4=14*i-10;
            n5=14*i-9;n6=14*i-8;n7=14*i-7;n8=14*i-6;
            n9=14*i-5;n10=14*i-4;n11=14*i-3;n12=14*i-2;
            n13=14*i-1;n14=14*i-0;
            n15=n14+1;n16=n15+1;n17=n16+1;n18=n17+1;n19=n18+1;
            elei1 = [n1 n2
                n2 n3
                n3 n4
                n4 n5
                n1 n6
                n1 n7
                n2 n7
                n2 n8
                n2 n9
                n3 n9
                n3 n10
                n3 n11
                n4 n11
                n4 n12
                n4 n13
                n5 n13
                n5 n14];
            elei2 = [n6 n7
                n7 n8
                n8 n9
                n9 n10
                n10 n11
                n11 n12
                n12 n13
                n13 n14
                n6 n15
                n7 n15
                n7 n16
                n8 n16
                n9 n16
                n9 n17
                n10 n17
                n11 n17
                n11 n18
                n12 n18
                n13 n18
                n13 n19
                n14 n19];
            ele = [ele;elei1;elei2];
        end
        ele = [ele
            71 72
            72 73
            73 74
            74 75
            71 76
            72 76
            73 76
            73 77
            74 77
            75 77];
        % Cross-section areas (m^2)
        section = (1e-3)*(1:.5:21); % List of discrete cross-section area
        A = zeros(200,1);
        dv1=[1, 2, 3, 4];
        dv2=[5, 8, 11, 14, 17];
        dv3=[19, 20, 21, 22, 23, 24];
        dv4=[18, 25, 56, 63, 94, 101, 132, 139, 170, 177];
        dv5=[26, 29, 32, 35, 38];
        dv6=[6, 7, 9, 10, 12, 13, 15, 16, 27, 28, 30, 31, 33, 34, 36, 37];
        dv7=[39, 40, 41, 42];
        dv8=[43, 46, 49, 52, 55];
        dv9=[57, 58, 59, 60, 61, 62];
        dv10=[64, 67, 70, 73, 76];
        dv11=[44, 45, 47, 48, 50, 51, 53, 54, 65, 66, 68, 69, 71, 72, 74,75];
        dv12=[77, 78, 79, 80];
        dv13=[81, 84, 87, 90, 93];
        dv14=[95, 96, 97, 98, 99, 100];
        dv15=[102, 105, 108, 111, 114];
        dv16=[82, 83, 85, 86, 88, 89, 91, 92, 103, 104, 106, 107, 109, 110, 112, 113];
        dv17=[115, 116, 117, 118];
        dv18=[119, 122, 125, 128, 131];
        dv19=[133, 134, 135, 136, 137, 138];
        dv20=[140, 143, 146, 149, 152];
        dv21=[120, 121, 123, 124, 126, 127, 129, 130, 141, 142, 144, 145, 147, 148, 150, 151];
        dv22=[153, 154, 155, 156];
        dv23=[157, 160, 163, 166, 169];
        dv24=[171, 172, 173,174, 175, 176];
        dv25=[178, 181, 184, 187, 190];
        dv26=[158, 159, 161, 162, 164, 165, 167, 168, 179, 180, 182, 183, 185, 186, 188,189];
        dv27=[191, 192, 193, 194];
        dv28=[195, 197, 198, 200];
        dv29=[196, 199];
        
        f = zeros(2,ps);
        g = zeros(200,ps);
        h = zeros(ps,0);
        
        for p = 1:ps
            xp = x(:,p);
            A(dv1)=section(xp(1));
            A(dv2)=section(xp(2));
            A(dv3)=section(xp(3));
            A(dv4)=section(xp(4));
            A(dv5)=section(xp(5));
            A(dv6)=section(xp(6));
            A(dv7)=section(xp(7));
            A(dv8)=section(xp(8));
            A(dv9)=section(xp(9));
            A(dv10)=section(xp(10));
            A(dv11)=section(xp(11));
            A(dv12)=section(xp(12));
            A(dv13)=section(xp(13));
            A(dv14)=section(xp(14));
            A(dv15)=section(xp(15));
            A(dv16)=section(xp(16));
            A(dv17)=section(xp(17));
            A(dv18)=section(xp(18));
            A(dv19)=section(xp(19));
            A(dv20)=section(xp(20));
            A(dv21)=section(xp(21));
            A(dv22)=section(xp(22));
            A(dv23)=section(xp(23));
            A(dv24)=section(xp(24));
            A(dv25)=section(xp(25));
            A(dv26)=section(xp(26));
            A(dv27)=section(xp(27));
            A(dv28)=section(xp(28));
            A(dv29)=section(xp(29));
            % Loadings
            nf1 = [1, 6, 15, 20, 29,34, 43, 48, 57, 62,71];
            nf2 = [1, 2, 3, 4, 5, 6, 8, 10, 12, 14, 15, 16, 17, 18,19, 20, 22, 24,...
                26, 28,29 30, 31, 32, 33, 34,36, 38, 40, 42, 43, 44, 45, 46, 47,...
                48, 50, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 66, 68, 70, 71,...
                72, 73, 74, 75];
            % node  dof  load(kips)   % dof = 1 for x-axis, 2 for y-axis, 3 for z-axis
            Load{1} = [nf1'    ones(11,1)      (1e4)*ones(11,1);
                nf2'     2*ones(55,1)	-(1e5)*ones(55,1)];
            % Prescribed displacement
            % node  dof  displacement(m)   % dof = 1 for x-axis, 2 for y-axis, 3 for z-axis
            BC = [76      1       0
                76      2       0
                77      1       0
                77      2       0];
            % Solving with Finite Element Method (FEM)
            [f(:,p),g(:,p)] = fem_solver(node,ele,A,E,Load,BC,rho,sigma_a);
        end
        f = f';
        g = g';
    case 12
        %% 942-bar 3D truss optimization
        x = x';
        x = round(x); % round x as cross-section size index
        % Material properties
        rho = 7850; % Density (kg/m^3)
        sigma_a = 400e6; % allowable stress (Pa)
        E = 200e9; % modulus of elasticity (Pa)
        % Geometry (position in m)
        node = 0.025*[-84 -84 3744;84 -84 3744;84 84 3744;-84 84 3744;-84 -84 3600;84 -84 3600;84 84 3600;-84 84 3600;... %(inch)
            -84 -84 3456;84 -84 3456;84 84 3456;-84 84 3456;-84 -84 3312;84 -84 3312;84 84 3312;-84 84 3312;...
            -84 -84 3168;84 -84 3168;84 84 3168;-84 84 3168;-84 -84 3024;84 -84 3024;84 84 3024;-84 84 3024;...
            -210 0 2880;-168 -168 2880;0 -210 2880;168 -168 2880;210 0 2880;168 168 2880;0 210 2880;-168 168 2880;...
            -210 0 2736;-168 -168 2736;0 -210 2736;168 -168 2736;210 0 2736;168 168 2736;0 210 2736;-168 168 2736;...
            -210 0 2592;-168 -168 2592;0 -210 2592;168 -168 2592;210 0 2592;168 168 2592;0 210 2592;-168 168 2592;...
            -210 0 2448;-168 -168 2448;0 -210 2448;168 -168 2448;210 0 2448;168 168 2448;0 210 2448;-168 168 2448;...
            -210 0 2304;-168 -168 2304;0 -210 2304;168 -168 2304;210 0 2304;168 168 2304;0 210 2304;-168 168 2304;...
            -210 0 2160;-168 -168 2160;0 -210 2160;168 -168 2160;210 0 2160;168 168 2160;0 210 2160;-168 168 2160;...
            -210 0 2016;-168 -168 2016;0 -210 2016;168 -168 2016;210 0 2016;168 168 2016;0 210 2016;-168 168 2016;...
            -210 0 1872;-168 -168 1872;0 -210 1872;168 -168 1872;210 0 1872;168 168 1872;0 210 1872;-168 168 1872;...
            -294 -84 1728;-252 -252 1728;-84 -294 1728;84 -294 1728;252 -252 1728;294 -84 1728;294 84 1728;252 252 1728;84 294 1728;-84 294 1728;-252 252 1728;-294 84 1728;...
            -294 -84 1584;-252 -252 1584;-84 -294 1584;84 -294 1584;252 -252 1584;294 -84 1584;294 84 1584;252 252 1584;84 294 1584;-84 294 1584;-252 252 1584;-294 84 1584;...
            -294 -84 1440;-252 -252 1440;-84 -294 1440;84 -294 1440;252 -252 1440;294 -84 1440;294 84 1440;252 252 1440;84 294 1440;-84 294 1440;-252 252 1440;-294 84 1440;...
            -294 -84 1296;-252 -252 1296;-84 -294 1296;84 -294 1296;252 -252 1296;294 -84 1296;294 84 1296;252 252 1296;84 294 1296;-84 294 1296;-252 252 1296;-294 84 1296;...
            -294 -84 1152;-252 -252 1152;-84 -294 1152;84 -294 1152;252 -252 1152;294 -84 1152;294 84 1152;252 252 1152;84 294 1152;-84 294 1152;-252 252 1152;-294 84 1152;...
            -294 -84 1008;-252 -252 1008;-84 -294 1008;84 -294 1008;252 -252 1008;294 -84 1008;294 84 1008;252 252 1008;84 294 1008;-84 294 1008;-252 252 1008;-294 84 1008;...
            -294 -84 864;-252 -252 864;-84 -294 864;84 -294 864;252 -252 864;294 -84 864;294 84 864;252 252 864;84 294 864;-84 294 864;-252 252 864;-294 84 864;...
            -294 -84 720;-252 -252 720;-84 -294 720;84 -294 720;252 -252 720;294 -84 720;294 84 720;252 252 720;84 294 720;-84 294 720;-252 252 720;-294 84 720;...
            -294 -84 576;-252 -252 576;-84 -294 576;84 -294 576;252 -252 576;294 -84 576;294 84 576;252 252 576;84 294 576;-84 294 576;-252 252 576;-294 84 576;...
            -294 -84 432;-252 -252 432;-84 -294 432;84 -294 432;252 -252 432;294 -84 432;294 84 432;252 252 432;84 294 432;-84 294 432;-252 252 432;-294 84 432;...
            -294 -84 288;-252 -252 288;-84 -294 288;84 -294 288;252 -252 288;294 -84 288;294 84 288;252 252 288;84 294 288;-84 294 288;-252 252 288;-294 84 288;...
            -294 -84 144;-252 -252 144;-84 -294 144;84 -294 144;252 -252 144;294 -84 144;294 84 144;252 252 144;84 294 144;-84 294 144;-252 252 144;-294 84 144;...
            -378 -84 0;-336 -336 0;-84 -378 0;84 -378 0;336 -336 0;378 -84 0;378 84 0;336 336 0;84 378 0;-84 378 0;-336 336 0;-378 84 0];
        ele = [1 3;2 4;1 2;2 3;3 4;4 1;5 6;6 7;7 8;8 5;1 5;2 6;3 7;4 8;5 9;6 10;7 11;8 12;1 6;2 7;3 8;4 5;5 2;6 3;7 4;1 8;5 10;6 11;7 12;8 9;9 6;10 7;11 8;5 12;9 10;10 11;11 12;12 9;13 14;14 15;15 16;16 13;17 18;18 19;19 20;20 17;9 13;10 14;11 15;12 16;13 17;14 18;15 19;16 20;17 21;18 22;19 23;20 24;9 14;10 15;11 16;12 13;13 10;14 11;15 12;9 16;13 18;14 19;15 20;16 17;17 14;18 15;19 16;13 20;17 22;18 23;19 24;20 21;21 18;22 19;23 20;17 24;21 22;22 23;23 24;24 21;21 26;22 28;23 30;24 32;21 28;22 30;23 32;24 26;26 22;28 23;30 24;32 21;21 27;22 29;23 31;24 25;21 25;22 27;23 29;24 31;25 26;26 27;27 28;28 29;29 30;30 31;31 32;32 25;33 34;34 35;35 36;36 37;37 38;38 39;39 40;40 33;26 34;28 36;30 38;32 40;34 42;36 44;38 46;40 48;25 34;26 35;27 36;28 37;29 38;30 39;31 40;32 33;33 26;34 27;35 28;36 29;37 30;38 31;39 32;40 25;33 42;34 43;35 44;36 45;37 46;38 47;39 48;40 41;41 34;42 35;43 36;44 37;45 38;46 39;47 40;48 33;25 33;27 35;29 37;31 39;33 41;35 43;37 45;39 47;41 42;42 43;43 44;44 45;45 46;46 47;47 48;48 41;49 50;50 51;51 52;52 53;53 54;54 55;55 56;56 49;42 50;44 52;46 54;48 56;50 58;52 60;54 62;56 64;41 50;42 51;43 52;44 53;45 54;46 55;47 56;48 49;49 42;50 43;51 44;52 45;53 46;54 47;55 48;56 41;49 58;50 59;51 60;52 61;53 62;54 63;55 64;56 57;57 50;58 51;59 52;60 53;61 54;62 55;63 56;64 49;41 49;43 51;45 53;47 55;49 57;51 59;53 61;55 63;57 58;58 59;59 60;60 61;61 62;62 63;63 64;64 57;65 66;66 67;67 68;68 69;69 70;70 71;71 72;72 65;73 74;74 75;75 76;76 77;77 78;78 79;79 80;80 73;58 66;60 68;62 70;64 72;66 74;68 76;70 78;72 80;74 82;76 84;78 86;80 88;57 66;58 67;59 68;60 69;61 70;62 71;63 72;64 65;65 58;66 59;67 60;68 61;69 62;70 63;71 64;72 57;65 74;66 75;67 76;68 77;69 78;70 79;71 80;72 73;73 66;74 67;75 68;76 69;77 70;78 71;79 72;80 65;73 82;74 83;75 84;76 85;77 86;78 87;79 88;80 81;81 74;82 75;83 76;84 77;85 78;86 79;87 80;88 73;57 65;59 67;61 69;63 71;65 73;67 75;69 77;71 79;73 81;75 83;77 85;79 87;81 82;82 83;83 84;84 85;85 86;86 87;87 88;88 81;90 82;93 84;96 86;99 88;81 90;90 83;83 93;93 85;85 96;96 87;87 99;99 81;89 82;82 91;92 84;84 94;95 86;86 97;98 88;88 100;83 91;85 94;87 97;81 100;81 89;83 92;85 95;87 98;89 90;90 91;92 93;93 94;95 96;96 97;98 99;99 100;101 102;102 103;104 105;105 106;107 108;108 109;110 111;111 112;91 92;94 95;97 98;100 89;103 104;106 107;109 110;112 101;90 102;93 105;96 108;99 111;102 114;105 117;108 120;111 123;89 102;90 103;101 90;102 91;92 105;93 106;104 93;105 94;95 108;96 109;107 96;108 97;98 111;99 112;110 99;111 100;101 114;102 115;113 102;114 103;104 117;105 118;116 128;117 129;107 120;108 121;119 108;120 109;110 123;111 124;122 111;123 112;91 103;94 106;97 109;100 112;89 101;92 104;95 107;98 110;103 115;106 118;109 121;112 124;101 113;104 116;107 119;110 122;91 104;94 107;97 110;100 101;103 92;106 95;109 98;89 112;103 116;106 119;109 122;112 113;115 104;118 107;121 110;101 124;113 114;114 115;116 117;117 118;119 120;120 121;122 123;123 124;125 126;126 127;128 129;129 130;131 132;132 133;134 135;135 136;137 138;138 139;140 141;141 142;143 144;144 145;146 147;147 148;115 116;118 119;121 122;124 113;127 128;130 131;133 134;136 125;139 140;142 143;145 146;148 137;114 126;117 129;120 132;123 135;126 138;129 141;132 144;135 147;138 150;141 153;144 156;147 159;113 126;114 127;125 114;126 115;116 129;117 130;128 117;129 118;119 132;120 133;131 120;132 121;122 135;123 136;134 123;135 124;125 138;126 139;137 126;138 127;128 141;129 142;140 152;141 153;131 144;132 145;143 132;144 133;134 147;135 148;146 135;147 136;137 150;138 151;149 138;150 139;140 153;141 154;152 141;153 142;143 156;144 157;155 144;156 145;146 159;147 160;158 147;159 148;115 127;118 130;121 133;124 136;113 125;116 128;119 131;122 134;127 139;130 142;133 145;136 148;125 137;128 140;131 143;134 146;139 151;142 154;145 157;148 160;137 149;140 152;143 155;146 158;115 128;118 131;121 134;124 125;125 114;128 117;131 120;113 136;127 140;130 143;133 146;136 137;139 128;142 131;145 134;125 148;139 152;142 155;145 158;148 149;151 140;154 143;157 146;137 160;149 150;150 151;152 153;153 154;155 156;156 157;158 159;159 160;161 162;162 163;164 165;165 166;167 168;168 169;170 171;171 172;173 174;174 175;176 177;177 178;179 180;180 181;182 183;183 184;151 152;154 155;157 158;160 149;163 164;166 167;169 170;172 161;175 176;178 179;181 182;184 173;150 162;153 165;156 168;159 171;162 174;165 177;168 180;171 183;174 186;177 189;180 192;183 195;149 162;150 163;161 150;162 151;152 165;153 166;164 153;165 154;155 168;156 169;167 156;168 157;158 171;159 172;170 159;171 160;161 174;162 175;173 162;174 163;164 177;165 178;176 188;177 189;167 180;168 181;179 168;180 169;170 183;171 184;182 171;183 172;173 186;174 187;185 174;186 175;176 189;177 190;188 177;189 178;179 192;180 193;191 180;192 181;182 195;183 196;194 183;195 184;151 163;154 166;157 169;160 172;149 161;152 164;155 167;158 170;163 175;166 178;169 181;172 184;161 173;164 176;167 179;170 182;175 187;178 190;181 193;184 196;173 185;176 188;179 191;182 194;151 164;154 167;157 170;160 161;161 150;164 153;167 156;149 172;163 176;166 179;169 182;172 173;175 164;178 167;181 170;161 184;175 188;178 191;181 194;184 185;187 176;190 179;193 182;173 196;185 186;186 187;188 189;189 190;191 192;192 193;194 195;195 196;197 198;198 199;200 201;201 202;203 204;204 205;206 207;207 208;209 210;210 211;212 213;213 214;215 216;216 217;218 219;219 220;187 188;190 191;193 194;196 185;199 200;202 203;205 206;208 197;211 212;214 215;217 218;220 209;186 198;189 201;192 204;195 207;198 210;201 213;204 216;207 219;210 222;213 225;216 228;219 231;185 198;186 199;197 186;198 187;188 201;189 202;200 189;201 190;191 204;192 205;203 192;204 193;194 207;195 208;206 195;207 196;197 210;198 211;209 198;210 199;200 213;201 214;212 224;213 225;203 216;204 217;215 204;216 205;206 219;207 220;218 207;219 208;209 222;210 223;221 210;222 211;212 225;213 226;224 213;225 214;215 228;216 229;227 216;228 217;218 231;219 232;230 219;231 220;187 199;190 202;193 205;196 208;185 197;188 200;191 203;194 206;199 211;202 214;205 217;208 220;197 209;200 212;203 215;206 218;211 223;214 226;217 229;220 232;209 221;212 224;215 227;218 230;187 200;190 203;193 206;196 197;197 186;200 189;203 192;185 208;199 212;202 215;205 218;208 209;211 200;214 203;217 206;197 220;211 224;214 227;217 230;220 221;223 212;226 215;229 218;209 232;221 222;222 223;224 225;225 226;227 228;228 229;230 231;231 232;223 224;226 227;229 230;232 221;222 234;225 237;228 240;231 243;234 223;237 226;240 229;243 232;221 234;224 237;227 240;230 243;233 222;236 225;239 228;242 231;222 235;225 238;228 241;231 244;223 235;226 238;229 241;232 244;221 233;224 236;227 239;230 242;223 236;226 239;229 242;235 224;238 227;241 230;244 221;233 232];
        % Cross-section areas (m^2)
        section = (1e-3)*(1:100); % List of discrete cross-section area
        group = [2 10 18 34 46 58 82 86 90 98 106 122 130 162 170 186 194 226 234 258 270 318 330 ...
            338 342 350 358 366 382 390 398 430 446 462 486 498 510 558 582 606 630 642 654 ...
            702 726 750 774 786 798 846 870 894 902 906 910 918 926 934 942];
        
        f = zeros(2,ps);
        g = zeros(942,ps);
        h = zeros(ps,0);
        
        for p = 1:ps
            xp = x(:,p);
            y = zeros(942,1);
            j = 1;
            for i = 1:942
                if i <= group(j)
                    y(i,1) = section(xp(j));
                else
                    j = j+1;
                    y(i,1) = section(xp(j));
                end
            end
            A = y;
            % Loadings
            % node  dof  load(N)   % dof = 1 for x-axis, 2 for y-axis, 3 for z-axis
            fx1 = 3e3;
            fx2 = 2e3;
            fy = 2e3;
            fz1 = -6e3;
            fz2 = -12e3;
            fz3 = -18e3;
            flist = [repmat([fx1;fy;fz1;
                fx2;fy;fz1;
                fx2;fy;fz1;
                fx1;fy;fz1],6,1);
                repmat([fx1;fy;fz2;
                fx1;fy;fz2;
                fx1;fy;fz2;
                fx2;fy;fz2;
                fx2;fy;fz2;
                fx2;fy;fz2;
                fx1;fy;fz2;
                fx1;fy;fz2],8,1);
                repmat([fx1;fy;fz3;
                fx1;fy;fz3;
                fx1;fy;fz3;
                fx2;fy;fz3;
                fx2;fy;fz3;
                fx2;fy;fz3;
                fx2;fy;fz3;
                fx2;fy;fz3;
                fx2;fy;fz3;
                fx1;fy;fz3;
                fx1;fy;fz3;
                fx1;fy;fz3],12,1)];
            Load{1} = [repelem((1:232)',3,1), repmat((1:3)',232,1), flist];
            % Prescribed displacement
            % node  dof  displacement(m)   % dof = 1 for x-axis, 2 for y-axis, 3 for z-axis
            BC = [repelem((233:244)',3,1), repmat((1:3)',12,1), zeros(3*12,1)];
            % Solving with Finite Element Method (FEM)
            [f(:,p),g(:,p)] = fem_solver(node,ele,A,E,Load,BC,rho,sigma_a);
        end
        f = f';
        g = g';
    otherwise
        warning('The number of predefined problems exceeded!');
        f = zeros(ps,2);
        g = zeros(ps,1);
        h = zeros(ps,1);
end
end

function [f,g,results] = fem_solver(node,ele,A,E,Load,BC,rho,sigma_a,varargin)
% 2D/3D Truss Finite Element Method solver
% node              = node list (size node = 2 for 2D problem, = 3 for 3D problem
% ele               = element list
% A                 = Cross-section area of member (size A = Nele*1)
% E                 = modulus of elasticity
% Load              = External Load ([node_index Fx Fy . . .])
% BC                = Prescribed displacement (Boundary conditions) [node_index dof_index displacement;...])
% Kaa               = Partitioned Stiffness Matrix
% partitioned_dof   = List of degrees of freedom(DOF) excluded prescribed DOF
% prescribed_dof    = List of prescribed DOF
% Get Number of Problem Dimensions (ND)
if size(node,2)==2
    ND=2;
elseif size(node,2)==3
    ND=3;
else
    error('Invalid node data');
end
% Transform A to column vector
if isrow(A)
    A = A';
end
Nnode = size(node,1);
Ndof = ND*Nnode;
Nele = size(ele,1);
L = zeros(Nele,1);
% Stiffness Assembly and Partition operator
NK = (2*ND)^2; % number of members of stiffness matrix
iKsparse=zeros(1,NK*Nele);
jKsparse=zeros(1,NK*Nele);
kKsparse=zeros(1,NK*Nele);
iSsparse=zeros(1,2*ND*Nele);
jSsparse=zeros(1,2*ND*Nele);
kSsparse=zeros(1,2*ND*Nele);
for i=1:Nele
    n1=ele(i,1);
    n2=ele(i,2);
    Ai=A(i,1);
    coor=node([n1,n2],:);
    diff=coor(2,:)-coor(1,:);
    L(i)=norm(coor(2,:)-coor(1,:));
    diff_L=diff/L(i);
    % Compute Transformation matrix
    T=[diff_L       zeros(1,ND);
        zeros(1,ND)	diff_L];
    % Compute B matrix
    B=[-1/L(i) 1/L(i)];
    % Compute list of degree of freedom of i-th element
    dof=[ND*n1-(ND-1):ND*n1,ND*n2-(ND-1):ND*n2];
    % Compute Stiffness matrix
    ki=Ai*(T'*B'*E*B*T)*L(i); % K = A*integrate(T'B'EBT,0->L,dx)
    iKsparse(1,NK*i-NK+1:NK*i)=repmat(dof,[1,2*ND]);
    jKsparse(1,NK*i-NK+1:NK*i)=repelem(dof,2*ND);
    kKsparse(1,NK*i-NK+1:NK*i)=reshape(ki,1,[]);
    % Compute S matrix for stress calculation
    iSsparse(1,2*ND*i-2*ND+1:2*ND*i)=i*ones(1,2*ND);
    jSsparse(1,2*ND*i-2*ND+1:2*ND*i)=[ND*n1-ND+1:ND*n1,ND*n2-ND+1:ND*n2];
    kSsparse(1,2*ND*i-2*ND+1:2*ND*i)=E*B*T; % S=EBT, S(Nele x Ndof)*Qele(Ndof x 1) = stress(Nele x 1)
end
% Assembly Stiffness (K) and S matrix
K=sparse(iKsparse,jKsparse,kKsparse,Ndof,Ndof);
S=sparse(iSsparse,jSsparse,kSsparse,Nele,Ndof);
% Matrix Partition - partitioned index generation
partitioned_dof=true(Ndof,1);
prescribed_dof=ND*(BC(:,1)-1)+BC(:,2);
partitioned_dof(prescribed_dof)=false;
prescribed_dof=~partitioned_dof;
F=cell(numel(Load),1);
for i=1:numel(Load)
    F{i}=zeros(Ndof,1);
    Find=ND*(Load{i}(:,1)-1)+Load{i}(:,2);
    Fval=Load{i}(:,3);
    F{i}(Find,1)=Fval;
end
% Solve
NLC = numel(Load); % Number of Load Cases
NBC = size(BC,1); % Number of Prescribed displacement (Boundary Conditions)
[Nnode,ND] = size(node);
displm_p = zeros(ND*Nnode-NBC,NLC);
displm = zeros(ND*Nnode,NLC);
compliance = zeros(1,NLC);
stress = zeros(size(ele,1),NLC);
for i=1:NLC % solve each Load Cases
    displm_p(:,i) = K(partitioned_dof,partitioned_dof)\F{i}(partitioned_dof,1); % Partition dof
    displm(prescribed_dof,i) = BC(:,3);
    displm(partitioned_dof,i) = displm_p(:,i);
    compliance(i) = displm(:,i)'*F{i};
    stress(:,i) = S*displm(:,i);
end
max_compliance=max(compliance);
if isnan(max_compliance)
    0;
end
max_stress = max(abs(stress),[],2);
% Obtain objective and constrained functions
mass = rho*sum(A.*L);
f = [mass;max_compliance];
g = max(max_stress-sigma_a,0);
% Return FEM results
results=[];
if numel(varargin)>0
    if strcmp(varargin,'post') % Return FEM data
        results=struct();
        results.mass=mass;
        results.displm=displm;
        results.stress=stress;
        results.compliance=compliance;
        results.partitioned_dof=partitioned_dof;
        results.prescribed_dof=prescribed_dof;
    end
end
end